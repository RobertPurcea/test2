{"version":3,"sources":["components/Header.js","components/Comment.js","components/Post.js","api/root.js","App.js","api/getResources.js","util/constants.js","index.js"],"names":["Header","_ref","title","react_default","a","createElement","className","Comment","name","email","body","Post","id","comments","onClick","_useState","useState","_useState2","Object","slicedToArray","showComments","setShowComments","map","_ref2","components_Comment","key","root","App","posts","setPosts","_useState3","_useState4","setComments","getNextRowOfPosts","start","step","axios","get","concat","fetchPosts","length","then","data","toConsumableArray","components_Header","lib_default","dataLength","next","hasMore","loader","components_Post","filter","_ref3","postId","find","comment","getCommentsForPost","_ref4","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.77f74a3a.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Header = ({ title }) => <h1 className=\"header\">{title}</h1>;\n\nexport default Header;\n","import React from \"react\";\n\nconst Comment = ({ name, email, body }) => {\n  return (\n    <div>\n      {name}\n      {email}\n      {body}\n    </div>\n  );\n};\n\nexport default Comment;\n","import React, { useState } from \"react\";\nimport Comment from \"./Comment\";\n\nconst Post = ({ id, title, body, comments, onClick }) => {\n  const [showComments, setShowComments] = useState(false);\n\n  return (\n    <div\n      onClick={() => {\n        setShowComments(!showComments);\n        onClick();\n      }}\n      className=\"post\"\n    >\n      <h1>title</h1>\n      <div>{body}</div>\n      {showComments && (\n        <div className=\"commentContainer\">\n          {comments.map(({ name, email, body, id }) => (\n            <Comment\n              className=\"comment\"\n              name={name}\n              email={email}\n              body={body}\n              key={id}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Post;\n","const root = \"https://jsonplaceholder.typicode.com\";\n\nexport default root;\n","import React, { useState } from \"react\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nimport Header from \"./components/Header\";\nimport Post from \"./components/Post\";\nimport { maxNumberOfPosts, stepForPostFetching } from \"./util/constants\";\nimport { fetchPosts, getCommentsForPost } from \"./api/getResources\";\n\nconst App = () => {\n  const [posts, setPosts] = useState([]);\n  const [comments, setComments] = useState([]);\n\n  const getNextRowOfPosts = () => {\n    const lastPostId = posts.length === 0 ? 1 : posts[posts.length - 1].id;\n\n    fetchPosts({ start: lastPostId, step: stepForPostFetching }).then(\n      ({ data }) => setPosts([...posts, ...data])\n    );\n  };\n\n  if (posts.length === 0) {\n    getNextRowOfPosts();\n  }\n\n  return (\n    <div>\n      <Header title=\"I am a header. I need some styling\" />\n\n      <InfiniteScroll\n        dataLength={posts.length}\n        next={getNextRowOfPosts}\n        hasMore={posts.length !== maxNumberOfPosts}\n        loader={<h4>Loading...</h4>}\n      >\n        {posts.map(({ body, title, id }) => (\n          <Post\n            key={id}\n            body={body}\n            title={title}\n            comments={comments.filter(({ postId }) => postId === id)}\n            onClick={() => {\n              // do not re-fetch data if we already have the comments for one post\n              if (comments.find(comment => comment.postId === id)) {\n                return;\n              }\n\n              getCommentsForPost({ postId: id }).then(({ data }) => {\n                setComments([...comments, ...data]);\n              });\n            }}\n          />\n        ))}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default App;\n","import root from \"./root\";\nimport axios from \"axios\";\n\nexport const fetchPosts = ({ start, step }) =>\n  axios.get(`${root}/posts?_start=${start}&_limit=${step}`);\n\nexport const getCommentsForPost = ({ postId }) =>\n  axios.get(`${root}/comments?postId=${postId}`);\n","export const maxNumberOfPosts = 99;\nexport const stepForPostFetching = 10;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}